---
description:
globs:
alwaysApply: false
---
# 自动化和部署流程

## 构建自动化

项目使用 TurboRepo 进行构建自动化，提供智能缓存和并行执行能力：

- **构建缓存**：TurboRepo 会缓存构建结果，只重新构建更改的部分
- **任务依赖**：在 [turbo.json](mdc:turbo.json) 中定义的任务依赖确保正确的执行顺序
- **构建输出**：构建产物会输出到各个包的指定目录（通常是 `dist` 或 `.next`）

## 持续集成/持续部署

推荐使用以下 CI/CD 流程：

1. **代码提交前**：
   - `pnpm lint` - 检查代码格式和质量
   - `pnpm build` - 确保构建成功

2. **CI 流程**：
   - 安装依赖
   - 代码检查（Lint 和类型检查）
   - 运行测试
   - 构建应用

3. **CD 流程**：
   - 部署到预览环境（PR 分支）
   - 部署到生产环境（主分支）

## 环境配置

- 开发环境：使用 `.env.local` 文件存储本地开发环境变量
- 生产环境：在部署平台配置环境变量
- 共享环境配置：可存放在 `.env` 文件中（不包含敏感信息）

环境变量应在构建时注入，遵循 Next.js 的环境变量规范：
- `NEXT_PUBLIC_*` - 客户端可访问的变量
- 其他变量 - 仅服务器端可访问

## 部署平台推荐

根据项目特性，推荐以下部署平台：

- **Vercel**：对 Next.js 应用有最佳支持，自动检测 monorepo 结构
- **Netlify**：支持前端应用部署，需要额外配置 monorepo
- **AWS Amplify**：提供全栈解决方案，适合需要更多后端服务的应用

## 环境区分

- **开发环境**：本地开发服务器，使用 `pnpm dev`
- **测试环境**：用于测试新功能的环境，通常从 PR 分支自动部署
- **预发布环境**：与生产环境配置相同，用于最终验证
- **生产环境**：最终用户使用的环境，从主分支部署

每个环境应有明确的使用目的和访问控制策略。
